#!/usr/bin/env python3
"""
Automatick√° kategorizace - bez interaktivn√≠ch ot√°zek
Kategorizuje pouze m√≠sta kter√° nemaj√≠ pole 'kategorie'
"""

import google.generativeai as genai
from pymongo import MongoClient
from dotenv import load_dotenv
import os
import json
import time
from tqdm import tqdm

# Naƒçten√≠ konfigurace
env_path = os.path.join(os.path.dirname(__file__), '..', 'databaze', '.env')
load_dotenv(env_path)

GEMINI_API_KEY = "AIzaSyCYnOrldYfeGFVp2Bepa2qyxFmy46NpMm4"
MONGODB_URI = os.getenv('MONGODB_URI')
DATABASE_NAME = os.getenv('DATABASE_NAME', 'hackathon_hk')
COLLECTION_NAME = os.getenv('COLLECTION_NAME', 'places')

# Inicializace Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-2.5-flash-lite')

DOSTUPNE_KATEGORIE = [
    "romantick√©", "hrad", "z√°mek", "museum", "galerie", "pivovar", "restaurace",
    "wellness", "l√°znƒõ", "relaxace", "koup√°n√≠", "aquapark", "baz√©n",
    "p≈ô√≠roda", "park", "zahrada", "rozhledna", "v√Ωhled",
    "sport", "aktivn√≠", "turistika", "golf",
    "kulturn√≠", "historick√©", "pam√°tka", "c√≠rkevn√≠",
    "z√°bava", "zoo", "festival", "hudba",
    "letn√≠", "klidn√©", "rodinn√©", "pro p√°ry", "venkovn√≠"
]


def kategorizuj_misto(doc):
    """Kategorizuje m√≠sto pomoc√≠ Gemini"""
    
    prompt = f"""Kategorizuj toto turistick√© m√≠sto a vra≈• JSON array kategori√≠.

M√≠sto:
N√°zev: {doc.get('nazev', 'Nezn√°m√©')}
Typ: {doc.get('source_file', '').split('/')[-1].replace('.geojson', '')}
Obec: {doc.get('nazev_obce', '')}"""
    
    if doc.get('typ_muzea'):
        prompt += f"\nTyp muzea: {doc.get('typ_muzea')}"
    if doc.get('popis'):
        prompt += f"\nPopis: {doc.get('popis')[:150]}"
    
    prompt += f"\n\nVyber 3-6 kategori√≠ ze seznamu:\n{', '.join(DOSTUPNE_KATEGORIE)}\n\nVra≈• POUZE JSON array."
    
    try:
        response = model.generate_content(prompt)
        text = response.text.strip().replace('```json', '').replace('```', '').strip()
        kategorie = json.loads(text)
        return [k for k in kategorie if k in DOSTUPNE_KATEGORIE][:6]
    except Exception as e:
        # Fallback podle source_file
        source = doc.get('source_file', '')
        if 'Hrady' in source: return ['hrad', 'historick√©']
        elif 'Z√°mky' in source: return ['z√°mek', 'historick√©']
        elif 'L√°znƒõ' in source: return ['l√°znƒõ', 'wellness']
        elif 'Koup√°n√≠' in source: return ['koup√°n√≠', 'letn√≠']
        else: return ['kulturn√≠']


# P≈ôipojen√≠ k MongoDB
print("üöÄ Automatick√° kategorizace m√≠st")
print("="*60)
client = MongoClient(MONGODB_URI, serverSelectionTimeoutMS=10000)
db = client[DATABASE_NAME]
collection = db[COLLECTION_NAME]

# Najdi m√≠sta bez kategori√≠
query = {"$or": [{"kategorie": {"$exists": False}}, {"kategorie": []}]}
count = collection.count_documents(query)

print(f"üìä M√≠st bez kategori√≠: {count}")
print(f"‚è±Ô∏è  Odhadovan√Ω ƒças: ~{count * 2 // 60} minut")
print("ü§ñ Model: gemini-2.5-flash-lite")
print("\nSpou≈°t√≠m...\n")

updated = 0
errors = 0

with tqdm(total=count, desc="Kategorizace", unit="m√≠sto") as pbar:
    cursor = collection.find(query)
    
    for doc in cursor:
        try:
            kategorie = kategorizuj_misto(doc)
            collection.update_one(
                {"_id": doc["_id"]},
                {"$set": {"kategorie": kategorie}}
            )
            updated += 1
            pbar.set_postfix({"‚úÖ": updated, "‚ùå": errors})
            time.sleep(0.5)
        except Exception as e:
            errors += 1
            pbar.set_postfix({"‚úÖ": updated, "‚ùå": errors})
        
        pbar.update(1)

print(f"\n‚úÖ HOTOVO!")
print(f"Aktualizov√°no: {updated}")
print(f"Chyby: {errors}")

client.close()
